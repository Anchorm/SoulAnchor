#include "exportbible.h"

ExportBible::ExportBible(QWidget *parent) :
    QWidget(parent, Qt::Window),
    ui(new Ui::ExportBible)
{
    ui->setupUi(this);
    ui->cb_format->addItem("ODF", "ODF");
    ui->cb_format->addItem("markdown", "markdown");
    ui->cb_format->addItem("plaintext", "plaintext");

    writer.setCodec(codec);
    ui->te->setText(tr("Choose a translation and format and click export.\n"
                    "A new file will be placed in the export folder in the main program directory.\n"
                    "But only if no other file with the same name exists."));

    exportDir.setPath(::userDataDir.path() + "/export");
    if (!exportDir.exists()) {

        if (exportDir.mkpath(".")) {
            ::sout << exportDir.path() << " created" << Qt::endl;
        } else {
            ::sout << "Cannot find/create writable location for bible export data." << Qt::endl;
            ::sout << "E.g. $HOME/.local/share/soulanchor/export" << Qt::endl;
        }
    }
}

ExportBible::~ExportBible()
{
    delete ui;
}

void ExportBible::translate()
{
    ui->retranslateUi(this);
}

void ExportBible::on_pb_folder_clicked()
{
    QDesktopServices::openUrl(exportDir.absolutePath());
}

void ExportBible::on_pb_export_clicked()
{
    ui->te->setText("working...");
    ui->te->repaint();

    bibleDoc->clear();
    QTextCursor cursor(bibleDoc);
    QByteArray formatBA = ui->cb_format->currentData().toByteArray();
    QString formatS = ui->cb_format->currentText();
    QString ext;

    if (formatS == "ODF") {
        ext = "odt";
    } else if (formatS == "markdown"){
        ext = "md";
    } else {
        ext = "txt";
    }

    QString abbr = ui->cb_tl->currentData().toString();
    QString desc = ui->cb_tl->currentText();
    QString table = "t_" + abbr;
    QString tlLanguage;

    QString sqlGetL = QString("SELECT abbreviation, language FROM bible_version_key WHERE "
                          "abbreviation = '%1'").arg(abbr);
    QSqlQuery queryGetL(sqlGetL, dbH.bibleDb);

    while (queryGetL.next()) {
        tlLanguage = queryGetL.value(1).toString();
    }

    QString sqlGetS; // get scriptures
    QSqlQuery queryGetS(dbH.bibleDb);

    sqlGetS = QString("SELECT b,c,v,t FROM '%1'").arg(table);
    queryGetS.prepare(sqlGetS);

    int b;
    QString bS;
    QString c;
    QString v;
    QString t;
    QString bookname;
    QString md;
    QString txt;

    // content
    queryGetS.exec();
    while (queryGetS.next()) {
        b = queryGetS.value(0).toInt();
        bS = queryGetS.value(0).toString();
        c = queryGetS.value(1).toString();
        v = queryGetS.value(2).toString();
        t = queryGetS.value(3).toString();

        // start of book
        if (c == "1" && v == "1") {
            bookname = ::g_bookNames[b];

            md = QString("\n---\n# %1\n\n### %1 %2\n\n").arg(bookname, c);
            txt = QString("\n%1\n\n%1 %2\n\n").arg(bookname, c);

            if (ext == "odt") {cursor.insertText(txt);}
            else if (ext == "md") {cursor.insertText(md);}
            else if (ext == "txt") {cursor.insertText(txt);}

        // start of chapter
        } else if (v == "1") {
            md = QString("\n### %1 %2\n\n").arg(bookname, c);
            txt = QString("\n%1 %2\n\n").arg(bookname, c);

            if (ext == "odt") {cursor.insertText(txt);}
            else if (ext == "md") {cursor.insertText(md);}
            else if (ext == "txt") {cursor.insertText(txt);}
        }
        // verse + text
        md = QString("%1 %2\n").arg(v, t);
        txt = QString("%1 %2\n").arg(v, t);

        if (ext == "odt") {cursor.insertText(txt);}
        else if (ext == "md") {cursor.insertText(md);}
        else if (ext == "txt") {cursor.insertText(txt);}
    }

    // footer
    if(tlLanguage == "english") {
        md = QString("\n\n\n _%1 - Generated by SoulAnchor_").arg(desc);
        txt = QString("\n\n\n %1 - Generated by SoulAnchor").arg(desc);
    } else {
        md = QString("\n\n\n _%1 - Gegenereerd door SoulAnchor_").arg(desc);
        txt = QString("\n\n\n %1 - Gegenereerd door SoulAnchor").arg(desc);
    }

    if (ext == "odt") {cursor.insertText(txt);}
    else if (ext == "md") {cursor.insertText(md);}
    else if (ext == "txt") {cursor.insertText(txt);}

    QString filename = QString(exportDir.path() + "/%1.%2").arg(abbr, ext);

    if ( QFile(filename).exists() ) {
        ui->te->setText(filename + tr(" exists. Canceling operation."));
        return; }

    writer.setFormat(formatBA);
    writer.setFileName(filename);

    if ( writer.write(bibleDoc) ) {
        ui->te->setText(QString(tr("done \n\n%1 created")).arg(writer.fileName()));
    } else {
        ui->te->setText(tr("failed\n\n something went wrong..."));
    }
}

void ExportBible::on_pb_close_clicked()
{
    hide();
    ui->cb_tl->setCurrentIndex(0);
    ui->te->clear();
}

void ExportBible::addToCb(const QString &abbr, const QString &desc) {
    ui->cb_tl->addItem(desc, abbr);
}
